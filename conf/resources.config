#!/usr/bin/env nextflow

process {

    withName: 'CUTADAPT' {
        cpus = { check_max (8, 'cpus')}
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'GET_HYBRIDS:SPLIT_FASTQ' {
        cpus = { check_max (8, 'cpus')}
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'GET_HYBRIDS:FASTQ_TO_FASTA' {
        cpus = { check_max (8, 'cpus')}
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'GET_HYBRIDS:BLAT' {
        cpus = { check_max (8, 'cpus')}
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
    }

    withName: 'GET_HYBRIDS:FILTER_BLAT' {
        cpus = { check_max (4, 'cpus')}
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }

    withName: 'GET_HYBRIDS:IDENTIFY_HYBRIDS' {
        cpus = { check_max (8, 'cpus')}
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
    }

    withName: 'GET_HYBRIDS:MERGE_HYBRIDS' {
        cpus = { check_max (8, 'cpus')}
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'GET_HYBRIDS:DEDUPLICATE' {
        cpus = { check_max (4, 'cpus')}
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
    }

    withName: 'GET_NON_HYBRIDS' {
        cpus = { check_max (4, 'cpus')}
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'PROCESS_HYBRIDS:CLUSTER_HYBRIDS:CHUNK_HYBRIDS' {
        cpus = { check_max (4, 'cpus')}
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'PROCESS_HYBRIDS:CLUSTER_HYBRIDS:IDENTIFY_CLUSTERS' {
        cpus = { check_max (8, 'cpus')}
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h * task.attempt, 'time' ) }
    }

    withName: 'PROCESS_HYBRIDS:CLUSTER_HYBRIDS:MERGE_CLUSTERS' {
        cpus = { check_max (8, 'cpus')}
        memory = { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'PROCESS_HYBRIDS:CONVERT_.*_COORDINATES' {
        cpus = { check_max (4, 'cpus')}
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'PROCESS_HYBRIDS:ANNOTATE_.*' {
        cpus = { check_max (4, 'cpus')}
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'PROCESS_HYBRIDS:COLLAPSE_CLUSTERS' {
        cpus = { check_max (4, 'cpus')}
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h * task.attempt, 'time' ) }
    }

    withName: 'GET_VISUALISATIONS:EXPORT_.*_BED' {
        cpus = { check_max (4, 'cpus')}
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    withName: 'GET_VISUALISATIONS:EXPORT_GENOMIC_BAM' {
        cpus = { check_max (4, 'cpus')}
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h * task.attempt, 'time' ) }
    }

}

if(!params.skip_qc) {

    process {

        withName: 'MAKE_REPORT:TOSCA_QC' {
            cpus = { check_max (4, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }

        withName: 'MAKE_REPORT:MULTIQC' {
            cpus = { check_max (1, 'cpus')}
            memory = { check_max( 16.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }

    }

}

if(!params.skip_premap) {

    process {

        withName: 'PREMAP:STAR' {
            cpus = { check_max (8, 'cpus')}
            memory = { check_max( 48.GB * task.attempt, 'memory' ) }
            time = { check_max( 2.h * task.attempt, 'time' ) }
        }

        withName: 'PREMAP:FILTER_SPLICED_READS' {
            cpus = { check_max (4, 'cpus')}
            memory = { check_max( 16.GB * task.attempt, 'memory' ) }
            time = { check_max( 2.h * task.attempt, 'time' ) }
        }

    }

}

if(params.cluster_old) {

    process {

        withName: 'PROCESS_HYBRIDS:CLUSTER_HYBRIDS_SLURM' {
            cpus = { check_max (8, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 12.h * task.attempt, 'time' ) }
        }

    }

}

if(params.analyse_structures) {

    process {

        withName: 'PROCESS_HYBRIDS:ANALYSE_STRUCTURES:CHUNK_SEQUENCES' {
            cpus = { check_max (4, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }

        withName: 'PROCESS_HYBRIDS:ANALYSE_STRUCTURES:CALCULATE_STRUCTURES' {
            cpus = { check_max (8, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 4.h * task.attempt, 'time' ) }
        }

        withName: 'PROCESS_HYBRIDS:ANALYSE_STRUCTURES:MERGE_STRUCTURES' {
            cpus = { check_max (4, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }

    }

}

if(params.shuffled_energies) {

    process {

        withName: 'PROCESS_HYBRIDS:ANALYSE_STRUCTURES:CALCULATE_SHUFFLED_ENERGIES' {
            cpus = { check_max (8, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 4.h * task.attempt, 'time' ) }
        }

        withName: 'PROCESS_HYBRIDS:ANALYSE_STRUCTURES:MERGE_SHUFFLED_ENERGIES' {
            cpus = { check_max (84, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }

    }

}

if(!params.skip_atlas) {

    process {

        withName: 'GET_ATLAS:MERGE_ATLAS_HYBRIDS' {
            cpus = { check_max (8, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }

        withName: 'GET_ATLAS:CLUSTER_ATLAS_HYBRIDS:CHUNK_HYBRIDS' {
            cpus = { check_max (4, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }

        withName: 'GET_ATLAS:CLUSTER_ATLAS_HYBRIDS:IDENTIFY_CLUSTERS' {
            cpus = { check_max (8, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 12.h * task.attempt, 'time' ) }
        }

        withName: 'GET_ATLAS:CLUSTER_ATLAS_HYBRIDS:MERGE_CLUSTERS' {
            cpus = { check_max (8, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }

        withName: 'GET_ATLAS:EXPORT_.*' {
            cpus = { check_max (4, 'cpus')}
            memory = { check_max( 16.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }

        withName: 'GET_ATLAS:COLLAPSE_ATLAS_CLUSTERS' {
            cpus = { check_max (4, 'cpus')}
            memory = { check_max( 16.GB * task.attempt, 'memory' ) }
            time = { check_max( 2.h * task.attempt, 'time' ) }
        }

        withName: 'GET_ATLAS:CONVERT_CLUSTER_COORDINATES' {
            cpus = { check_max (4, 'cpus')}
            memory = { check_max( 16.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }

        withName: 'GET_ATLAS:ANNOTATE_CLUSTERS' {
            cpus = { check_max (4, 'cpus')}
            memory = { check_max( 16.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
        }

    }

}

if(params.goi) {

    process {

        withName: 'GET_VISUALISATIONS:GET_CONTACT_MAPS' {
            cpus = { check_max (8, 'cpus')}
            memory = { check_max( 32.GB * task.attempt, 'memory' ) }
            time = { check_max( 6.h * task.attempt, 'time' ) }
        }

        withName: 'GET_VISUALISATIONS:GET_ARCS' {
            cpus = { check_max (4, 'cpus')}
            memory = { check_max( 16.GB * task.attempt, 'memory' ) }
            time = { check_max( 1.h * task.attempt, 'time' ) }
    }

    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'gpus') {
    try {
      return Math.min( obj, params.max_gpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max gpus '${params.max_gpus}' is not valid! Using default value: $obj"
      return obj as String
    }
  }
}